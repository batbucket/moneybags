{"version":3,"sources":["components/InputField/InputField.module.css","components/MoneyTable/MoneyTable.module.css","App.module.css","components/InputField/InputField.js","components/MoneyTable/MoneyTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","InputField","props","className","styles","customInput","readOnly","placeholder","prefix","suffix","value","type","onChange","e","target","MoneyTable","size","scroll","y","longTable","dataSource","pagination","columns","title","dataIndex","Title","Typography","App","useState","start","setStart","savings","setSavings","income","setIncome","swr","setSwr","annualReturn","setAnnualReturn","years","setYears","data","parseInt","annualReturnPercent","swrPercent","isRetired","modYears","targetNetWorth","netWorth","prevNetWorth","i","safeWithdrawalAmount","interest","difference","convertToMoney","progress","percent","Math","floor","width","push","key","year","money","isColor","isPositive","sign","style","green","red","round","abs","toString","replace","centerContainer","table","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,YAAc,gCAAgC,SAAW,+B,oBCA3ED,EAAOC,QAAU,CAAC,UAAY,gC,+ECA9BD,EAAOC,QAAU,CAAC,gBAAkB,6BAA6B,MAAQ,mBAAmB,IAAM,iBAAiB,MAAQ,qB,2JCqB5GC,MAjBf,SAAoBC,GAChB,OACI,kBAAC,IAAD,CACIC,UAAS,UAAKC,IAAOC,YAAZ,YACLH,EAAMI,SAAWF,IAAOE,SAAW,MAEvCC,YAAaL,EAAMK,YACnBC,OAAQN,EAAMM,OACdC,OAAQP,EAAMO,OACdC,MAAOR,EAAMQ,MACbJ,SAAUJ,EAAMI,SAChBK,KAAM,SACNC,SAAU,SAACC,GAAD,OAAOX,EAAMU,SAASC,EAAEC,OAAOJ,W,2BCiBtCK,MA9Bf,SAAoBb,GAChB,OACI,kBAAC,IAAD,CACIc,KAAM,QACNC,OAAQ,CAAEC,EAAG,KACbf,UAAWC,IAAOe,UAClBC,WAAYlB,EAAMkB,WAClBC,YAAY,EACZC,QAAS,CACL,CAAEC,MAAO,OAAQC,UAAW,QAC5B,CAAED,MAAO,iBAAaC,UAAW,WACjC,CAAED,MAAO,kBAAcC,UAAW,YAClC,CACID,MAAO,eACPC,UAAW,cAEf,CAAED,MAAO,kBAAmBC,UAAW,OACvC,CACID,MAAO,YACPC,UAAW,YAEf,CACID,MAAO,aACPC,UAAW,gBCpBvBC,EAAUC,IAAVD,MA8IOE,MA5If,WAAgB,IAAD,EACeC,mBAAS,GADxB,mBACJC,EADI,KACGC,EADH,OAEmBF,mBAAS,KAF5B,mBAEJG,EAFI,KAEKC,EAFL,OAGiBJ,mBAAS,MAH1B,mBAGJK,EAHI,KAGIC,EAHJ,OAIWN,mBAAS,GAJpB,mBAIJO,EAJI,KAICC,EAJD,OAK6BR,mBAAS,GALtC,mBAKJS,EALI,KAKUC,EALV,OAMeV,mBAAS,IANxB,mBAMJW,EANI,KAMGC,EANH,KAQLC,EAAO,GAETC,SAASP,GAAOO,SAASL,IACzBD,EAAOC,GAYX,IATA,IAAMM,EAAqC,IAAfN,EACtBO,EAAmB,IAANT,EAEfU,GAAY,EACZC,EAAW,EAETC,EAAiBd,EAASW,EAC5BI,EAAWnB,EACXoB,EAAe,EACVC,EAAI,EAAGA,EAAI,MAAQL,EAAWK,IAAK,CACxCD,EAAeD,EAGf,IAAMG,GAFNH,GAAYA,EAAWL,EAAsBZ,GAELa,EAClCQ,EAAWH,EAAeN,EAC1BU,EAAaC,EAAeN,EAAWC,GAAc,GACrDM,EACF,kBAAC,IAAD,CACIC,QAASC,KAAKC,MAAOP,EAAuBlB,EAAU,KACtD0B,MAAO,KAIXX,GAAYD,IACZF,GAAY,EACZC,EAAWI,GAGXF,EAAW,GACXP,EAAKmB,KAAK,CACNC,IAAKX,EACLY,KAAMZ,EACNf,IAAKmB,EAAeH,GACpBpB,QAASuB,EAAevB,GAAS,GACjCqB,SAAUE,EAAeF,GAAU,GACnCG,WACAP,SAAUM,EAAeN,GACzBK,eASZ,SAASC,EAAeS,EAAOC,GAC3B,IAAMC,EAAaF,GAAS,EAExBG,EAAO,GACPC,EAAQ,GAOZ,OALIH,IACAE,EAAOD,EAAa,IAAM,IAC1BE,EAAQF,EAAa7D,IAAOgE,MAAQhE,IAAOiE,KAI3C,0BAAMlE,UAAWgE,GACZD,EACG,IACAT,KAAKa,MAAMb,KAAKc,IAAIR,IACfS,WACAC,QAAQ,wBAAyB,MAKtD,OA1BIlC,IAAUO,GACVN,EAASM,GA0BT,oCACI,yBAAK3C,UAAS,UAAKC,IAAOsE,gBAAZ,YAA+BtE,IAAOmB,QAChD,kBAACE,EAAD,uCAEJ,yBAAKtB,UAAWC,IAAOsE,iBACnB,kBAAC,EAAD,CACIlE,OAAQ,IACRC,OAAO,kBACPC,MAAOmB,EACPjB,SAAUkB,KAGlB,yBAAK3B,UAAWC,IAAOsE,iBACnB,kBAAC,EAAD,CACIlE,OAAQ,IACRC,OAAO,iBACPC,MAAOqB,EACPnB,SAAUoB,KAGlB,yBAAK7B,UAAWC,IAAOsE,iBACnB,kBAAC,EAAD,CACIlE,OAAQ,IACRC,OAAO,6BACPC,MAAOuB,EACPrB,SAAUsB,KAGlB,yBAAK/B,UAAWC,IAAOsE,iBACnB,kBAAC,EAAD,CACIjE,OAAO,oBACPC,MAAOyB,EACPvB,SAAUwB,KAGlB,yBAAKjC,UAAWC,IAAOsE,iBACnB,kBAAC,EAAD,CACIjE,OAAO,kBACPC,MAAO2B,EACPzB,SAAU0B,KAGlB,yBAAKnC,UAAWC,IAAOsE,iBACnB,kBAAC,EAAD,CACIpE,UAAU,EACVG,OAAO,sBACPC,MAAO6B,EACP3B,SAAU4B,KAGlB,yBAAKrC,WAAYC,IAAOsE,gBAAiBtE,IAAOuE,QAC5C,kBAAC,EAAD,CAAYvD,WAAYqB,OCnIpBmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SD0HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fd3e8f7e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"customInput\":\"InputField_customInput__1hOqU\",\"readOnly\":\"InputField_readOnly__BwxJm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"longTable\":\"MoneyTable_longTable__2Gli8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"centerContainer\":\"App_centerContainer__1InyN\",\"green\":\"App_green__1qrp_\",\"red\":\"App_red__32RwF\",\"title\":\"App_title__25lgh\"};","import { Input } from 'antd'\r\n\r\nimport React from 'react'\r\nimport styles from './InputField.module.css'\r\n\r\nfunction InputField(props) {\r\n    return (\r\n        <Input\r\n            className={`${styles.customInput} ${\r\n                props.readOnly ? styles.readOnly : null\r\n            }`}\r\n            placeholder={props.placeholder}\r\n            prefix={props.prefix}\r\n            suffix={props.suffix}\r\n            value={props.value}\r\n            readOnly={props.readOnly}\r\n            type={'number'}\r\n            onChange={(e) => props.onChange(e.target.value)}\r\n        />\r\n    )\r\n}\r\n\r\nexport default InputField\r\n","import { Table } from 'antd'\r\nimport React from 'react'\r\nimport styles from './MoneyTable.module.css'\r\n\r\nfunction MoneyTable(props) {\r\n    return (\r\n        <Table\r\n            size={'small'}\r\n            scroll={{ y: 400 }}\r\n            className={styles.longTable}\r\n            dataSource={props.dataSource}\r\n            pagination={false}\r\n            columns={[\r\n                { title: 'Year', dataIndex: 'year' },\r\n                { title: 'Savings Δ', dataIndex: 'savings' },\r\n                { title: 'Interest Δ', dataIndex: 'interest' },\r\n                {\r\n                    title: 'Total Δ',\r\n                    dataIndex: 'difference',\r\n                },\r\n                { title: 'Safe Withdrawal', dataIndex: 'swr' },\r\n                {\r\n                    title: 'Net Worth',\r\n                    dataIndex: 'netWorth',\r\n                },\r\n                {\r\n                    title: 'Progress %',\r\n                    dataIndex: 'progress',\r\n                },\r\n            ]}\r\n        />\r\n    )\r\n}\r\n\r\nexport default MoneyTable\r\n","import React, { useState } from 'react'\r\nimport { Typography, Progress } from 'antd'\r\nimport './App.css'\r\nimport styles from './App.module.css'\r\nimport InputField from './components/InputField/InputField'\r\nimport MoneyTable from './components/MoneyTable/MoneyTable'\r\n\r\nconst { Title } = Typography\r\n\r\nfunction App() {\r\n    const [start, setStart] = useState(0)\r\n    const [savings, setSavings] = useState(6000)\r\n    const [income, setIncome] = useState(45000)\r\n    const [swr, setSwr] = useState(4)\r\n    const [annualReturn, setAnnualReturn] = useState(7)\r\n    const [years, setYears] = useState(40)\r\n\r\n    const data = []\r\n\r\n    if (parseInt(swr) > parseInt(annualReturn)) {\r\n        setSwr(annualReturn)\r\n    }\r\n\r\n    const annualReturnPercent = annualReturn * 0.01\r\n    const swrPercent = swr * 0.01\r\n\r\n    let isRetired = false\r\n    let modYears = 0\r\n\r\n    const targetNetWorth = income / swrPercent\r\n    let netWorth = start\r\n    let prevNetWorth = 0\r\n    for (let i = 0; i < 100 && !isRetired; i++) {\r\n        prevNetWorth = netWorth\r\n        netWorth += netWorth * annualReturnPercent + savings\r\n\r\n        const safeWithdrawalAmount = netWorth * swrPercent\r\n        const interest = prevNetWorth * annualReturnPercent\r\n        const difference = convertToMoney(netWorth - prevNetWorth, true)\r\n        const progress = (\r\n            <Progress\r\n                percent={Math.floor((safeWithdrawalAmount / income) * 100)}\r\n                width={30}\r\n            />\r\n        )\r\n\r\n        if (netWorth >= targetNetWorth) {\r\n            isRetired = true\r\n            modYears = i\r\n        }\r\n\r\n        if (netWorth > 0) {\r\n            data.push({\r\n                key: i,\r\n                year: i,\r\n                swr: convertToMoney(safeWithdrawalAmount),\r\n                savings: convertToMoney(savings, true),\r\n                interest: convertToMoney(interest, true),\r\n                progress,\r\n                netWorth: convertToMoney(netWorth),\r\n                difference,\r\n            })\r\n        }\r\n    }\r\n\r\n    if (years !== modYears) {\r\n        setYears(modYears)\r\n    }\r\n\r\n    function convertToMoney(money, isColor) {\r\n        const isPositive = money >= 0\r\n\r\n        let sign = ''\r\n        let style = ''\r\n\r\n        if (isColor) {\r\n            sign = isPositive ? '+' : '-'\r\n            style = isPositive ? styles.green : styles.red\r\n        }\r\n\r\n        return (\r\n            <span className={style}>\r\n                {sign +\r\n                    '$' +\r\n                    Math.round(Math.abs(money))\r\n                        .toString()\r\n                        .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n            </span>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={`${styles.centerContainer} ${styles.title}`}>\r\n                <Title>Net Worth Milestone Generator</Title>\r\n            </div>\r\n            <div className={styles.centerContainer}>\r\n                <InputField\r\n                    prefix={'$'}\r\n                    suffix='initial savings'\r\n                    value={start}\r\n                    onChange={setStart}\r\n                />\r\n            </div>\r\n            <div className={styles.centerContainer}>\r\n                <InputField\r\n                    prefix={'$'}\r\n                    suffix='yearly savings'\r\n                    value={savings}\r\n                    onChange={setSavings}\r\n                />\r\n            </div>\r\n            <div className={styles.centerContainer}>\r\n                <InputField\r\n                    prefix={'$'}\r\n                    suffix='yearly retirement expenses'\r\n                    value={income}\r\n                    onChange={setIncome}\r\n                />\r\n            </div>\r\n            <div className={styles.centerContainer}>\r\n                <InputField\r\n                    suffix='% safe withdrawal'\r\n                    value={swr}\r\n                    onChange={setSwr}\r\n                />\r\n            </div>\r\n            <div className={styles.centerContainer}>\r\n                <InputField\r\n                    suffix='% annual return'\r\n                    value={annualReturn}\r\n                    onChange={setAnnualReturn}\r\n                />\r\n            </div>\r\n            <div className={styles.centerContainer}>\r\n                <InputField\r\n                    readOnly={true}\r\n                    suffix='years to retirement'\r\n                    value={years}\r\n                    onChange={setYears}\r\n                />\r\n            </div>\r\n            <div className={(styles.centerContainer, styles.table)}>\r\n                <MoneyTable dataSource={data} />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}