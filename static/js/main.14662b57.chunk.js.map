{"version":3,"sources":["components/MoneyTable/MoneyTable.module.scss","App.module.scss","components/InputField/InputField.js","components/MoneyTable/MoneyTable.js","App.js","serviceWorker.js","index.js","components/InputField/InputField.module.scss"],"names":["module","exports","InputField","props","status","readOnly","isSuccess","styles","success","failure","className","customInput","placeholder","prefix","suffix","value","type","min","onChange","e","target","MoneyTable","size","scroll","y","longTable","dataSource","pagination","columns","title","dataIndex","Title","Typography","App","useState","start","setStart","savings","setSavings","income","setIncome","swr","setSwr","annualReturn","setAnnualReturn","data","annualReturnPercent","swrPercent","isRetired","years","targetNetWorth","i","netWorth","getNetWorthAtYear","parseInt","prevNetWorth","safeWithdrawalAmount","interest","difference","convertToMoney","progress","percent","Math","round","width","push","key","year","annual","pow","money","isColor","isPositive","sign","style","green","red","abs","toString","replace","centerContainer","table","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.14662b57.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"longTable\":\"MoneyTable_longTable__1cOnb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"centerContainer\":\"App_centerContainer__iqYI7\",\"green\":\"App_green__33vUW\",\"red\":\"App_red__3LJ88\",\"title\":\"App_title__o5Gw-\"};","import { Input } from 'antd'\r\n\r\nimport React, { useState } from 'react'\r\nimport styles from './InputField.module.scss'\r\n\r\nfunction InputField(props) {\r\n    let status = null\r\n    if (props.readOnly) {\r\n        status = props.isSuccess ? styles.success : styles.failure\r\n    }\r\n    return (\r\n        <Input\r\n            className={`${styles.customInput} ${status}`}\r\n            placeholder={props.placeholder}\r\n            prefix={props.prefix}\r\n            suffix={props.suffix}\r\n            value={props.value}\r\n            readOnly={props.readOnly}\r\n            type={props.readOnly ? 'text' : 'number'}\r\n            min=\"0\"\r\n            onChange={(e) => props.onChange(e.target.value)}\r\n        />\r\n    )\r\n}\r\n\r\nexport default InputField\r\n","import { Table } from 'antd'\r\nimport React, { useState } from 'react'\r\nimport styles from './MoneyTable.module.scss'\r\n\r\nfunction MoneyTable(props) {\r\n    return (\r\n        <Table\r\n            size={'small'}\r\n            scroll={{ y: 400 }}\r\n            className={styles.longTable}\r\n            dataSource={props.dataSource}\r\n            pagination={false}\r\n            columns={[\r\n                { title: 'Year', dataIndex: 'year' },\r\n                { title: 'Savings Δ', dataIndex: 'savings' },\r\n                { title: 'Interest Δ', dataIndex: 'interest' },\r\n                {\r\n                    title: 'Total Δ',\r\n                    dataIndex: 'difference',\r\n                },\r\n                { title: 'Safe Withdrawal', dataIndex: 'swr' },\r\n                {\r\n                    title: 'Net Worth',\r\n                    dataIndex: 'netWorth',\r\n                },\r\n                {\r\n                    title: 'Progress %',\r\n                    dataIndex: 'progress',\r\n                },\r\n            ]}\r\n        />\r\n    )\r\n}\r\n\r\nexport default MoneyTable\r\n","import React, { useState } from 'react'\r\nimport { Typography, Progress } from 'antd'\r\nimport './App.css'\r\nimport styles from './App.module.scss'\r\nimport InputField from './components/InputField/InputField'\r\nimport MoneyTable from './components/MoneyTable/MoneyTable'\r\n\r\nconst { Title } = Typography\r\n\r\nfunction App() {\r\n    const [start, setStart] = useState(7000)\r\n    const [savings, setSavings] = useState(6000)\r\n    const [income, setIncome] = useState(45000)\r\n    const [swr, setSwr] = useState(4)\r\n    const [annualReturn, setAnnualReturn] = useState(7)\r\n\r\n    const data = []\r\n\r\n    const annualReturnPercent = annualReturn * 0.01\r\n    const swrPercent = swr * 0.01\r\n\r\n    let isRetired = false\r\n    let years = 0\r\n\r\n    const targetNetWorth = income / swrPercent\r\n\r\n    for (let i = 0; i < 100 && !isRetired; i++) {\r\n        const netWorth = getNetWorthAtYear(i) + parseInt(start)\r\n        const prevNetWorth = getNetWorthAtYear(i - 1) + parseInt(start)\r\n\r\n        const safeWithdrawalAmount = netWorth * swrPercent\r\n        const interest = prevNetWorth * annualReturnPercent\r\n        const difference = convertToMoney(netWorth - prevNetWorth, true)\r\n        const progress = (\r\n            <Progress\r\n                percent={Math.round((safeWithdrawalAmount / income) * 100)}\r\n                width={30}\r\n            />\r\n        )\r\n\r\n        if (netWorth >= targetNetWorth) {\r\n            isRetired = true\r\n            years = i\r\n        }\r\n\r\n        if (netWorth > 0) {\r\n            data.push({\r\n                key: i,\r\n                year: i,\r\n                swr: convertToMoney(safeWithdrawalAmount),\r\n                savings: convertToMoney(savings, true),\r\n                interest: convertToMoney(interest, true),\r\n                progress,\r\n                netWorth: convertToMoney(netWorth),\r\n                difference,\r\n            })\r\n        }\r\n    }\r\n\r\n    if (!isRetired) {\r\n        years = '☠'\r\n    }\r\n\r\n    function getNetWorthAtYear(year) {\r\n        const annual = annualReturnPercent + 1\r\n        return (savings * (Math.pow(annual, year + 1) - 1)) / (annual - 1)\r\n    }\r\n\r\n    function convertToMoney(money, isColor) {\r\n        const isPositive = money >= 0\r\n\r\n        let sign = ''\r\n        let style = ''\r\n\r\n        if (isColor) {\r\n            sign = isPositive ? '+' : '-'\r\n            style = isPositive ? styles.green : styles.red\r\n        }\r\n\r\n        return (\r\n            <span className={style}>\r\n                {sign +\r\n                    '$' +\r\n                    Math.round(Math.abs(money))\r\n                        .toString()\r\n                        .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n            </span>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={`${styles.centerContainer} ${styles.title}`}>\r\n                <Title>Net Worth Milestone Generator</Title>\r\n            </div>\r\n            <div className={styles.centerContainer}>\r\n                <InputField\r\n                    prefix={'$'}\r\n                    suffix=\"initial savings\"\r\n                    value={start}\r\n                    onChange={setStart}\r\n                />\r\n            </div>\r\n            <div className={styles.centerContainer}>\r\n                <InputField\r\n                    prefix={'$'}\r\n                    suffix=\"yearly savings\"\r\n                    value={savings}\r\n                    onChange={setSavings}\r\n                />\r\n            </div>\r\n            <div className={styles.centerContainer}>\r\n                <InputField\r\n                    prefix={'$'}\r\n                    suffix=\"yearly retired income\"\r\n                    value={income}\r\n                    onChange={setIncome}\r\n                />\r\n            </div>\r\n            <div className={styles.centerContainer}>\r\n                <InputField\r\n                    suffix=\"% safe withdrawal\"\r\n                    value={swr}\r\n                    onChange={setSwr}\r\n                />\r\n            </div>\r\n            <div className={styles.centerContainer}>\r\n                <InputField\r\n                    suffix=\"% annual return\"\r\n                    value={annualReturn}\r\n                    onChange={setAnnualReturn}\r\n                />\r\n            </div>\r\n            <div className={styles.centerContainer}>\r\n                <InputField\r\n                    isSuccess={isRetired}\r\n                    readOnly={true}\r\n                    suffix=\"years to retirement\"\r\n                    value={years}\r\n                />\r\n            </div>\r\n            <div className={(styles.centerContainer, styles.table)}>\r\n                <MoneyTable dataSource={data} />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"customInput\":\"InputField_customInput__3P9m0\",\"success\":\"InputField_success__3eWNs\",\"failure\":\"InputField_failure__348Q3\"};"],"sourceRoot":""}